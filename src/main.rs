use cairo::{Context, Format, ImageSurface};
use clap::Parser;
use intuit_empire::{empire_logo, intuit_logo, Commands};
use std::error::Error;
use std::fs;

#[derive(Debug, Clone)]
struct Size {
    width: i32,
    height: i32,
}

impl Size {
    fn new(width: i32, height: i32) -> Self {
        Self { width, height }
    }

    fn from_arg(s: &str) -> Result<Self, String> {
        s.parse::<Self>()
            .map_err(|_| format!("invalid size: {}", s))
    }
}

impl std::str::FromStr for Size {
    type Err = Box<dyn Error>;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let ix = s.find('x').ok_or("invalid size")?;
        let width = s[..ix].parse()?;
        let height = s[ix + 1..].parse()?;
        Ok(Self { width, height })
    }
}

impl std::fmt::Display for Size {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}x{}", self.width, self.height)
    }
}

#[derive(Parser, Debug)]
struct Args {
    #[clap(long, value_parser = Size::from_arg, default_value_t = Size::new(3456,  2234))]
    size: Size,

    #[clap(long, default_value = "intuit.png")]
    dst: String,
}

fn main() -> Result<(), Box<dyn Error>> {
    let empire = "M487.14284,110.93358C321.54286,110.93358 187.14286,245.33362 187.14286,410.93362C187.14286,576.53362 321.54284,710.93366 487.14284,710.93362C652.74284,710.93362 787.14286,576.53366 787.14286,410.93362C787.14286,245.3336 652.74284,110.93358 487.14284,110.93358zM472.98468,135.80606C473.15348,135.7975 473.32602,135.8143 473.49488,135.80606L474.7704,156.15044C457.46708,156.9754 440.62572,159.49878 424.38774,163.61218L429.42602,183.44638C386.80408,194.2423 348.84062,216.68778 319.09438,247.22188L304.48978,232.93618C292.61156,245.12214 281.99204,258.50792 272.7296,272.85964L255.63776,261.57136C302.31874,189.39406 381.83314,140.43148 472.98468,135.80606zM500.7908,135.80606C592.15428,140.27534 671.88054,189.26038 718.64796,261.57136L701.55612,272.85964C692.3145,258.54406 681.70474,245.1604 669.85968,232.99994L655.2551,247.22188C625.50422,216.67148 587.4965,194.24604 544.8597,183.44638L549.89796,163.61218C533.65998,159.49878 516.81864,156.9754 499.5153,156.15044L500.7908,135.80606zM487.14284,225.72952C495.81632,225.70964 504.48982,226.23972 511.63266,227.26016L500.47194,320.1173C523.9314,323.53822 544.4998,335.8161 558.69898,353.47188L633.18876,297.60452C642.23686,308.87632 652.49448,326.55928 657.8699,339.95148L572.28316,376.5586C576.58506,387.18706 578.9796,398.7686 578.9796,410.93362C578.9796,422.65322 576.80084,433.85232 572.79336,444.16066L657.67856,480.44894C652.44098,493.92068 642.29036,511.57208 633.3801,522.92342L559.4005,467.56628C545.2202,485.62538 524.41626,498.23626 500.66324,501.74994L511.63266,593.07648C497.34694,595.27646 476.93878,595.24488 462.65306,593.20404L473.62244,501.74994C449.85228,498.23372 429.06618,485.58252 414.8852,467.5025L341.09694,522.85964C332.04886,511.58784 321.79124,493.90488 316.4158,480.5127L401.49234,444.09688C397.4985,433.80382 395.30612,422.63222 395.30612,410.93362C395.30612,398.7476 397.6865,387.13824 402.00254,376.49484L316.60714,340.01524C321.84474,326.5435 331.99534,308.8921 340.90562,297.54074L415.58672,353.47188C429.7859,335.8161 450.3543,323.53822 473.81378,320.1173L462.65306,227.38768C469.79592,226.2877 478.46938,225.74942 487.14284,225.72952zM241.9898,285.16832L260.35714,294.22444C252.6104,309.24278 246.2766,325.09906 241.60714,341.6734L261.25,347.22188C255.53952,367.48714 252.44898,388.85 252.44898,410.93362C252.44898,433.03866 255.5288,454.4264 261.25,474.70912L241.60714,480.2576C246.27338,496.80526 252.61992,512.64756 260.35714,527.6428L241.9898,536.69892C222.59162,498.98758 211.63266,456.23444 211.63266,410.93362C211.63266,365.63278 222.59162,322.87966 241.9898,285.16832zM732.29592,285.16832C751.6941,322.87966 762.65302,365.63278 762.65302,410.93362C762.65302,456.23444 751.6941,498.98758 732.29592,536.69892L713.92856,527.6428C721.66906,512.6431 728.0108,496.81066 732.67858,480.2576L713.03572,474.70912C718.7569,454.4264 721.83674,433.03866 721.83674,410.93362C721.83674,388.85 718.74622,367.48714 713.03572,347.22188L732.67858,341.6734C728.01042,325.1037 721.67212,309.23918 713.92856,294.22444L732.29592,285.16832zM272.7296,549.00762C281.99558,563.35906 292.61104,576.74454 304.48978,588.93108L319.09438,574.64536C348.84062,605.17944 386.80408,627.62496 429.42602,638.42088L424.38774,658.25504C440.62572,662.36842 457.46708,664.89184 474.7704,665.7168L473.49488,686.06118C382.13144,681.59186 302.40516,632.60682 255.63776,560.29588L272.7296,549.00762zM701.6199,549.00762L718.64796,560.29588C671.88054,632.60682 592.15428,681.59186 500.7908,686.06118L499.5153,665.7168C516.81864,664.89184 533.65998,662.36842 549.89796,658.25504L544.8597,638.42088C587.4965,627.62118 625.50422,605.19574 655.2551,574.64536L669.85968,588.8673C681.71956,576.69162 692.36698,563.34254 701.6199,549.00762";
    let empire = empire.parse::<Commands>()?.normalize();
    println!("{:?}", empire.bounds());

    let intuit = "M2019.15 169.126C2019.15 240.249 2078.12 292.274 2153.04 292.274C2227.95 292.274 2286.99 240.249 2286.99 169.126V5.72329H2214.45V160.702C2214.45 199.093 2187.83 224.945 2152.84 224.945C2117.86 224.945 2091.24 199.222 2091.24 160.702V5.72329H2018.7L2019.15 169.126ZM2480.81 71.1231H2567.36V286.872H2639.9V71.1231H2726.46V5.59464H2480.81V71.1231ZM2433.93 5.59464H2361.39V286.872H2433.93V5.59464ZM1726.1 71.1231H1812.66V286.872H1885.2V71.1231H1971.69V5.59464H1726.1V71.1231ZM1345.54 5.59464H1273V286.872H1345.54V5.59464ZM1687.91 123.083C1687.91 51.9597 1628.94 0 1553.96 0C1478.97 0 1420 51.9597 1420 123.083V286.872H1492.54V131.893C1492.54 93.5018 1519.17 67.6505 1554.15 67.6505C1589.13 67.6505 1615.75 93.3732 1615.75 131.893V286.872H1688.29L1687.84 123.083H1687.91Z";
    let intuit = intuit.parse::<Commands>()?.normalize();
    println!("{:?}", intuit.bounds());

    let args = Args::parse();
    println!("{:?}", args);

    let surface = ImageSurface::create(Format::ARgb32, args.size.width, args.size.height)?;
    let ctx = Context::new(&surface)?;

    ctx.save()?;
    ctx.set_source_rgb(0.0, 0.0, 0.0);
    ctx.translate(args.size.width as f64 / 2.0, args.size.height as f64 / 2.0);
    intuit_logo::create(&ctx);
    ctx.fill()?;
    ctx.restore()?;

    ctx.save()?;
    ctx.set_source_rgb(1.0, 1.0, 1.0);
    ctx.translate(args.size.width as f64 / 2.0, args.size.height as f64 / 2.0);
    empire_logo::create(&ctx);
    ctx.fill()?;
    ctx.restore()?;

    let cx = args.size.width as f64 / 2.0;
    let cy = args.size.height as f64 / 2.0;
    ctx.save()?;
    ctx.set_source_rgb(0.0, 0.0, 0.0);
    ctx.new_path();
    ctx.move_to(0.0, cy);
    ctx.line_to(args.size.width as f64, cy);
    ctx.move_to(cx, 0.0);
    ctx.line_to(cx, args.size.height as f64);
    ctx.stroke()?;
    ctx.restore()?;

    surface.write_to_png(&mut fs::File::create(&args.dst)?)?;

    Ok(())
}
